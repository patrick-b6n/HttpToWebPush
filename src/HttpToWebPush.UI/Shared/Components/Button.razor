<button class="min-w-32 @BgCss tracking-wide font-bold rounded shadow-md hover:shadow-lg py-2 px-6 inline-flex items-center" @onclick="OnBtnClick">
    <span class="mx-auto">@ChildContent</span>
</button>

@code {

    public enum ButtonBackgroundColor
    {
        Red,
        Green,
        Blue,
        White
    }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback OnClickCallback { get; set; }

    [Parameter]
    public ButtonBackgroundColor BackgroundColor { get; set; } = ButtonBackgroundColor.White;

    private string BgCss => BackgroundColor switch 
    {
        ButtonBackgroundColor.Green => "border border-green-500 bg-green-500 text-gray-100 hover:bg-green-600 hover:text-white",
        ButtonBackgroundColor.Red => "border border-red-500 bg-red-500 text-gray-100 hover:bg-red-600 hover:text-white",
        ButtonBackgroundColor.Blue => "border border-blue-500 bg-blue-500 text-gray-100 hover:bg-blue-600 hover:text-white",
        ButtonBackgroundColor.White => "border border-gray-100 bg-white text-gray-800 hover:bg-gray-100 hover:text-gray-900",
        _ => throw new ArgumentOutOfRangeException()
        };

    private async Task OnBtnClick() => await OnClickCallback.InvokeAsync();
}